datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  VOLUNTEER
  ORGANIZATION
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  volunteer     Volunteer?
  role          Role       @default(VOLUNTEER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

/// Organizations that can be created on Campus Reach
model Organization {
  id       String  @id @default(cuid())
  name     String
  email    String?
  industry String?
  website  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Volunteer profile associated to a User and optionally to an Organization
model Volunteer {
  id              String        @id @default(cuid())
  userId          String        @unique

  // Profile fields
  firstName       String
  lastName        String
  pronouns        String?
  major           String?
  graduationDate  DateTime?

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
